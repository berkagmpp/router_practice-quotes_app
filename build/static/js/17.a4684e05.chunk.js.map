{"version":3,"file":"static/js/17.a4684e05.chunk.js","mappings":"0MACA,EAAuB,mB,SCKvB,EAJa,SAACA,GACV,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,Y,SCFhD,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BC4DnI,EAtDkB,SAACH,GACf,OAAoCI,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UAqBrB,OACI,UAAC,EAAAE,SAAD,YACI,SAAC,KAAD,CAAQC,KAAMN,EAAYO,QAAS,SAACC,GAAD,MAAc,gEACjD,SAAC,EAAD,WACI,kBAAMZ,UAAWC,EACXY,SAxBlB,SAA2BC,GACvBA,EAAMC,iBAEN,IAAMC,EAAgBV,EAAeW,QAAQC,MACvCC,EAAcX,EAAaS,QAAQC,MAIzCnB,EAAMqB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAiBlCI,QAdS,WACvBlB,GAAc,IAWN,UAGKN,EAAMyB,YACH,gBAAKxB,UAAWC,EAAhB,UACI,SAACwB,EAAA,EAAD,OAIR,iBAAKzB,UAAWC,EAAhB,WACI,kBAAOyB,QAAQ,SAAf,qBACA,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKvB,QAExC,iBAAKN,UAAWC,EAAhB,WACI,kBAAOyB,QAAQ,OAAf,mBACA,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKrB,QAEtC,gBAAKR,UAAWC,EAAhB,UACI,mBAAQD,UAAU,MAAM+B,QA1Bd,WAC1B1B,GAAc,IAyBE,kC,kBC1BxB,EApBiB,WACb,OAAgC2B,EAAAA,EAAAA,GAAQC,EAAAA,IAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,GAAUC,EAAAA,EAAAA,OAEhBC,EAAAA,EAAAA,YAAU,WACS,cAAXH,GACAC,EAAQG,KAAK,aAElB,CAACJ,EAAQC,IAOZ,OACI,SAAC,EAAD,CAAWZ,UAAsB,YAAXW,EAAsBf,WANxB,SAAAoB,GAEpBN,EAAYM","sources":["webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","components/pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__CYeP8\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n    return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__yTdt1\",\"loading\":\"QuoteForm_loading__o+IzC\",\"control\":\"QuoteForm_control__OH+qD\",\"actions\":\"QuoteForm_actions__WPfto\"};","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n    const [isEntering, setIsEntering] = useState(false);\n    const authorInputRef = useRef();\n    const textInputRef = useRef();\n\n    function submitFormHandler(event) {\n        event.preventDefault();\n\n        const enteredAuthor = authorInputRef.current.value;\n        const enteredText = textInputRef.current.value;\n\n        // optional: Could validate here\n\n        props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    };\n\n    const formFocusedHandler = () => {\n        setIsEntering(true);\n    };\n\n    const finishEnteringHandler = () => {\n        setIsEntering(false);\n    };\n\n    return (\n        <Fragment>\n            <Prompt when={isEntering} message={(location) => 'Are you sure to live? All your entered data will be lost.'} />\n            <Card>\n                <form className={classes.form} \n                      onSubmit={submitFormHandler}\n                      onFocus={formFocusedHandler} >\n                    {props.isLoading && (\n                        <div className={classes.loading}>\n                            <LoadingSpinner />\n                        </div>\n                    )}\n\n                    <div className={classes.control}>\n                        <label htmlFor='author'>Author</label>\n                        <input type='text' id='author' ref={authorInputRef} />\n                    </div>\n                    <div className={classes.control}>\n                        <label htmlFor='text'>Text</label>\n                        <textarea id='text' rows='5' ref={textInputRef}></textarea>\n                    </div>\n                    <div className={classes.actions}>\n                        <button className='btn' onClick={finishEnteringHandler}>Add Quote</button>\n                    </div>\n                </form>\n            </Card>\n        </Fragment>\n    );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport QuoteForm from \"../quotes/QuoteForm\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { addQuote } from \"../../lib/api\";\r\n\r\nconst NewQuote = () => {\r\n    const { sendRequest, status } = useHttp(addQuote);  // destructuring data\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (status === 'completed') {\r\n            history.push('/quotes');\r\n        }\r\n    }, [status, history]);  // actually, history is not changed\r\n\r\n    const addQuoteHandler = quoteData => {\r\n        // console.log(quoteData);\r\n        sendRequest(quoteData);\r\n    };\r\n\r\n    return (\r\n        <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} /> // sending 'pending' status if status is 'isLoading' to QuoteForm\r\n    );\r\n};\r\n\r\nexport default NewQuote;"],"names":["props","className","classes","children","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","Fragment","when","message","location","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","onFocus","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","onClick","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"sourceRoot":""}