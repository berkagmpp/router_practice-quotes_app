{"version":3,"file":"static/js/165.9b74846e.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","components/comments/Comments.js","components/pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__MJcnm\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n    return (\n        <figure className={classes.quote}>\n            <p>{props.text}</p>\n            <figcaption>{props.author}</figcaption>\n        </figure>\n    );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__qGhXV\",\"loading\":\"NewCommentForm_loading__ueMSU\",\"control\":\"NewCommentForm_control__lfnDb\",\"actions\":\"NewCommentForm_actions__2W1Z5\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n\n    const { sendRequest, status, error } = useHttp(addComment);\n\n    const { onAddedComment } = props;   // send to Comments(parent) component\n\n    useEffect(() => {\n        if (status === 'completed' && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment]);\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        // optional: Could validate here\n\n        // send comment to server\n        const enteredText = commentTextRef.current.value;\n        sendRequest({ commentData: { enteredText }, quoteId: props.quoteId });     // de-structured quotId is also okey from useParams() intead of props.quoteId\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === 'pending' && (\n                <div className='centered'>\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor='comment'>Your Comment</label>\n                <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className='btn'>Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__hTC0B\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <p>{props.text}</p>\n        </li>\n    );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__87I7n\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n    return (\n        <ul className={classes.comments}>\n            {props.comments.map((comment) => (\n                <CommentItem key={comment.id} text={comment.enteredText} />\n            ))}\n        </ul>\n    );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__av3QO\"};","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList'\n\nimport classes from './Comments.module.css';\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n\n    const params = useParams();\n    const { quoteId } = params;     // etAllComments fn needs only quoteId, so choose quoteId only from params \n\n    const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);  // quoteId which is destructed from params makes to useEffect re-run as precise as possible \n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    // addedCommentHandler fn is passed to NewCommentForm component, and use as a dependency of useEffect, \n    // so need useCallback with dependancies.\n    // if we dosen't use useCallback here, NewCommentForm is re-created when Comments component re-rendered, may create the infinite loop.\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    let comments;\n\n    if (status === 'pending') {\n        comments = (\n            <div className='centered'>\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n        comments = <CommentsList comments={loadedComments} />;\n    }\n\n    if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n        comments = <p className='centered'>No comments were added yet!</p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className='btn' onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { getSingleQuote } from \"../../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\r\nimport Comments from '../comments/Comments'\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams();\r\n    const { quoteId } = params;     // getSingleQuote fn needs only quoteId, so choose quoteId only from params \r\n\r\n    const match = useRouteMatch();\r\n\r\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(()=>{\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);     // quoteId which is destructed from params makes to useEffect re-run as precise as possible \r\n    \r\n    if (status === \"pending\") {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <p className='centered focused'>{error}</p>\r\n        );\r\n    }\r\n\r\n    if (!loadedQuote.text) {    //  becouse loadedQuote is always returned from getSingleQuote fn of api.js, '.text' is necessary\r\n        return <p>No quote found!</p>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text} />\r\n            <Route path={match.path} exact> \r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>  \r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail; "],"names":["props","className","classes","text","author","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url"],"sourceRoot":""}